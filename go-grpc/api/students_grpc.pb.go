// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: students.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentOperationsClient is the client API for StudentOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentOperationsClient interface {
	FetchStudents(ctx context.Context, in *FetchStudentsRequest, opts ...grpc.CallOption) (*StudentsResponse, error)
	CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*StudentsResponse, error)
	UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*StudentsResponse, error)
	DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*StudentsResponse, error)
}

type studentOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentOperationsClient(cc grpc.ClientConnInterface) StudentOperationsClient {
	return &studentOperationsClient{cc}
}

func (c *studentOperationsClient) FetchStudents(ctx context.Context, in *FetchStudentsRequest, opts ...grpc.CallOption) (*StudentsResponse, error) {
	out := new(StudentsResponse)
	err := c.cc.Invoke(ctx, "/main.StudentOperations/FetchStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentOperationsClient) CreateStudent(ctx context.Context, in *CreateStudentRequest, opts ...grpc.CallOption) (*StudentsResponse, error) {
	out := new(StudentsResponse)
	err := c.cc.Invoke(ctx, "/main.StudentOperations/CreateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentOperationsClient) UpdateStudent(ctx context.Context, in *UpdateStudentRequest, opts ...grpc.CallOption) (*StudentsResponse, error) {
	out := new(StudentsResponse)
	err := c.cc.Invoke(ctx, "/main.StudentOperations/UpdateStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentOperationsClient) DeleteStudent(ctx context.Context, in *DeleteStudentRequest, opts ...grpc.CallOption) (*StudentsResponse, error) {
	out := new(StudentsResponse)
	err := c.cc.Invoke(ctx, "/main.StudentOperations/DeleteStudent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentOperationsServer is the server API for StudentOperations service.
// All implementations must embed UnimplementedStudentOperationsServer
// for forward compatibility
type StudentOperationsServer interface {
	FetchStudents(context.Context, *FetchStudentsRequest) (*StudentsResponse, error)
	CreateStudent(context.Context, *CreateStudentRequest) (*StudentsResponse, error)
	UpdateStudent(context.Context, *UpdateStudentRequest) (*StudentsResponse, error)
	DeleteStudent(context.Context, *DeleteStudentRequest) (*StudentsResponse, error)
	mustEmbedUnimplementedStudentOperationsServer()
}

// UnimplementedStudentOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedStudentOperationsServer struct {
}

func (UnimplementedStudentOperationsServer) FetchStudents(context.Context, *FetchStudentsRequest) (*StudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchStudents not implemented")
}
func (UnimplementedStudentOperationsServer) CreateStudent(context.Context, *CreateStudentRequest) (*StudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStudent not implemented")
}
func (UnimplementedStudentOperationsServer) UpdateStudent(context.Context, *UpdateStudentRequest) (*StudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStudent not implemented")
}
func (UnimplementedStudentOperationsServer) DeleteStudent(context.Context, *DeleteStudentRequest) (*StudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStudent not implemented")
}
func (UnimplementedStudentOperationsServer) mustEmbedUnimplementedStudentOperationsServer() {}

// UnsafeStudentOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentOperationsServer will
// result in compilation errors.
type UnsafeStudentOperationsServer interface {
	mustEmbedUnimplementedStudentOperationsServer()
}

func RegisterStudentOperationsServer(s grpc.ServiceRegistrar, srv StudentOperationsServer) {
	s.RegisterService(&StudentOperations_ServiceDesc, srv)
}

func _StudentOperations_FetchStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentOperationsServer).FetchStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.StudentOperations/FetchStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentOperationsServer).FetchStudents(ctx, req.(*FetchStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentOperations_CreateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentOperationsServer).CreateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.StudentOperations/CreateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentOperationsServer).CreateStudent(ctx, req.(*CreateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentOperations_UpdateStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentOperationsServer).UpdateStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.StudentOperations/UpdateStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentOperationsServer).UpdateStudent(ctx, req.(*UpdateStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentOperations_DeleteStudent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStudentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentOperationsServer).DeleteStudent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.StudentOperations/DeleteStudent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentOperationsServer).DeleteStudent(ctx, req.(*DeleteStudentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentOperations_ServiceDesc is the grpc.ServiceDesc for StudentOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.StudentOperations",
	HandlerType: (*StudentOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchStudents",
			Handler:    _StudentOperations_FetchStudents_Handler,
		},
		{
			MethodName: "CreateStudent",
			Handler:    _StudentOperations_CreateStudent_Handler,
		},
		{
			MethodName: "UpdateStudent",
			Handler:    _StudentOperations_UpdateStudent_Handler,
		},
		{
			MethodName: "DeleteStudent",
			Handler:    _StudentOperations_DeleteStudent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "students.proto",
}
